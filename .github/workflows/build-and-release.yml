name: Build and Release Plugin

on:
  push:
    branches:
      - main
      - development
      - 'release/*'
  workflow_dispatch: {}

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  #====================================================
  # JOB: Build, Tag, and Release
  # This job handles the packaging and GitHub Release creation.
  #====================================================
  build_and_release:
    name: Build and Release Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create tags and releases

    env:
      PLUGIN_SLUG: "${{ vars.PLUGIN_SLUG }}"
      MAIN_BRANCH: "${{ vars.MAIN_BRANCH }}"
      MAIN_PLUGIN_FILE: "${{ vars.MAIN_PLUGIN_FILE }}" # e.g., 'my-plugin.php'
      PHP_VERSION: "${{ vars.PHP_VERSION }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: "Debug: Print Plugin File Content"
        id: debug_plugin_file
        run: |
          if [ -f "${{ env.MAIN_PLUGIN_FILE }}" ]; then
            echo "Contents of ${{ env.MAIN_PLUGIN_FILE }}:"
            cat "${{ env.MAIN_PLUGIN_FILE }}"
          else
            echo "File ${{ env.MAIN_PLUGIN_FILE }} does not exist."
          fi

      - name: Get Version from Plugin File
        id: version
        run: |
          if [ ! -f "${{ env.MAIN_PLUGIN_FILE }}" ]; then
            echo "Error: File not found at path ${{ env.MAIN_PLUGIN_FILE }}."
            exit 1
          fi

          # Debug: Print the plugin file content
          echo "Debug: Printing the content of ${{ env.MAIN_PLUGIN_FILE }}"
          cat "${{ env.MAIN_PLUGIN_FILE }}"

          # Normalize line endings to Unix-style
          sed -i 's/\r$//' "${{ env.MAIN_PLUGIN_FILE }}"

          # Extract version using a flexible regex
          VERSION=$(grep -iE '^\s*Version:\s*' "${{ env.MAIN_PLUGIN_FILE }}" | sed -E 's/^\s*Version:\s*//I')

          # Debug: Print the raw version output
          echo "Debug: Raw version output: '$VERSION'"

          # Remove any trailing or leading whitespace
          VERSION=$(echo "$VERSION" | tr -d '[:space:]')

          if [ -z "$VERSION" ]; then
            echo "Error: Version could not be determined from ${{ env.MAIN_PLUGIN_FILE }}."
            echo "Ensure the file contains a 'Version:' field in the plugin header."
            exit 1
          fi

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Prepare Release Variables
        id: prep
        run: |
          BASE_VERSION="${{ steps.version.outputs.version }}"
          BRANCH_NAME="${{ github.ref_name }}"
          
          if [[ "$BRANCH_NAME" == "${{ env.MAIN_BRANCH }}" ]]; then
            echo "IS_PRERELEASE=false" >> "$GITHUB_OUTPUT"
            echo "RELEASE_TAG=v${BASE_VERSION}" >> "$GITHUB_OUTPUT"
            echo "RELEASE_NAME=Release ${BASE_VERSION}" >> "$GITHUB_OUTPUT"
          else
            SUFFIX=$(echo "$BRANCH_NAME" | tr ' /' '--')
            echo "IS_PRERELEASE=true" >> "$GITHUB_OUTPUT"
            echo "RELEASE_TAG=v${BASE_VERSION}-${SUFFIX}" >> "$GITHUB_OUTPUT"
            echo "RELEASE_NAME=Pre-release ${BASE_VERSION} (${BRANCH_NAME})" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if Release Already Exists
        id: check_release
        run: |
          if gh release view ${{ steps.prep.outputs.RELEASE_TAG }} >/dev/null 2>&1; then
            echo "Release ${{ steps.prep.outputs.RELEASE_TAG }} already exists."
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Release ${{ steps.prep.outputs.RELEASE_TAG }} does not exist. Proceeding."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up PHP
        if: steps.check_release.outputs.exists == 'false'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Cache and Install Composer Dependencies
        if: steps.check_release.outputs.exists == 'false'
        run: |
          if [ -f composer.json ]; then
            composer install --no-dev --prefer-dist --no-progress
          else
            echo "composer.json not found, skipping dependency installation."
          fi

      - name: Build Plugin Package
        if: steps.check_release.outputs.exists == 'false'
        id: package
        run: |
          PACKAGE_NAME="${{ env.PLUGIN_SLUG }}.zip"
          STAGING_DIR="staging"
          mkdir -p "${STAGING_DIR}"
          rsync -av --checksum . "${STAGING_DIR}/" --exclude=".git" --exclude=".github" --exclude="node_modules" --exclude="${STAGING_DIR}" --exclude=".gitignore" --exclude="README.md" --exclude="*.zip"
          cd "${STAGING_DIR}"
          zip -r "../${PACKAGE_NAME}" .
          cd ..
          echo "PACKAGE_PATH=${PACKAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Compute ZIP checksum and size
        if: steps.check_release.outputs.exists == 'false'
        id: zipmeta
        run: |
          ZIP_PATH="${{ steps.package.outputs.PACKAGE_PATH }}"
          CHECKSUM=$(sha256sum "$ZIP_PATH" | awk '{print $1}')
          SIZE=$(stat -c %s "$ZIP_PATH")
          echo "checksum=$CHECKSUM" >> "$GITHUB_OUTPUT"
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"

      - name: Create Update JSON
        if: steps.check_release.outputs.exists == 'false'
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.prep.outputs.RELEASE_TAG }}/${{ steps.package.outputs.PACKAGE_PATH }}"
          jq -n \
            --arg new_version "${{ steps.version.outputs.version }}" \
            --arg slug "${{ env.PLUGIN_SLUG }}" \
            --arg package "$DOWNLOAD_URL" \
            '{ "new_version": $new_version, "slug": $slug, "package": $package }' > update.json

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prep.outputs.RELEASE_TAG }}
          name: ${{ steps.prep.outputs.RELEASE_NAME }}
          prerelease: ${{ steps.prep.outputs.IS_PRERELEASE }}
          files: |
            ${{ steps.package.outputs.PACKAGE_PATH }}
            update.json